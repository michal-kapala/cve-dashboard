import { z } from "zod";
import { createTRPCRouter, publicProcedure } from "~/server/api/trpc";
import { createChannel, createClient } from 'nice-grpc';
import {
  CreateRequest,
  CveClient,
  CveDefinition,
  CveModel,
  DeleteRequest,
  GetManyRequest,
  GetOneRequest,
  UpdateRequest,
} from '../proto/compiled_proto/cve';
import { WithCveSchema } from "~/utils/zod";

export const cveRouter = createTRPCRouter({
  getOne: publicProcedure
    .input(z.object(
      { 
        id: z.string(),
        jwt: z.string(),
      }
    ))
    .query(async ({ input }) => {
      const cveChannel = createChannel(process.env.GPRC_CVE_URL ?? 'localhost:50052');
      const cveClient: CveClient = createClient(CveDefinition, cveChannel);

      // create a request
      const req: GetOneRequest = {
        id: input.id,
        jwt: input.jwt,
      };

      const response = await cveClient.getOne(req);
      cveChannel.close();
      
      return response;
    }),

  getMany: publicProcedure
    .input(z.object(
      { 
        pageSize: z.number(),
        pageOffset: z.number(),
        jwt: z.string(),
      }
    ))
    .query(async ({ input }) => {
      const cveChannel = createChannel(process.env.GPRC_CVE_URL ?? 'localhost:50052');
      const cveClient: CveClient = createClient(CveDefinition, cveChannel);

      // create a request
      const req: GetManyRequest = {
        pageSize: input.pageSize,
        pageOffset: input.pageOffset,
        jwt: input.jwt,
      };

      const response = await cveClient.getMany(req);
      cveChannel.close();
      
      return response;
    }),
  create: publicProcedure
    .input(z.object(WithCveSchema))
    .query(async ({ input }) => {
      const cveChannel = createChannel(process.env.GPRC_CVE_URL ?? 'localhost:50052');
      const cveClient: CveClient = createClient(CveDefinition, cveChannel);

      // create a request
      const req: CreateRequest = {
        cve: input.cve,
        jwt: input.jwt,
      };

      const response = await cveClient.create(req);
      cveChannel.close();
      
      return response;
    }),
  update: publicProcedure
    .input(z.object(WithCveSchema))
    .query(async ({ input }) => {
      const cveChannel = createChannel(process.env.GPRC_CVE_URL ?? 'localhost:50052');
      const cveClient: CveClient = createClient(CveDefinition, cveChannel);

      // create a request
      const req: UpdateRequest = {
        cve: input.cve,
        jwt: input.jwt,
      };

      const response = await cveClient.update(req);
      cveChannel.close();
      
      return response;
    }),
  delete: publicProcedure
    .input(z.object({
      id: z.string(),
      jwt: z.string(),
    }))
    .query(async ({ input }) => {
      const cveChannel = createChannel(process.env.GPRC_CVE_URL ?? 'localhost:50052');
      const cveClient: CveClient = createClient(CveDefinition, cveChannel);

      // create a request
      const req: DeleteRequest = {
        id: input.id,
        jwt: input.jwt,
      };

      const response = await cveClient.delete(req);
      cveChannel.close();
      
      return response;
    }),
});
