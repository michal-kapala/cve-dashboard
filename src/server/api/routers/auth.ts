import { z } from "zod";
import { createTRPCRouter, publicProcedure } from "~/server/api/trpc";
import { createChannel, createClient } from 'nice-grpc';
import {
  LoginRequest,
  AuthClient,
  AuthDefinition,
  RegisterRequest,
} from '../proto/compiled_proto/auth';
import sha256 from 'fast-sha256';

export const authRouter = createTRPCRouter({
  login: publicProcedure
    .input(z.object(
      { 
        user: z.string(),
        pwd: z.string(),
      }
    ))
    .query(async ({ input }) => {
      const authChannel = createChannel(process.env.GPRC_AUTH_URL ?? 'localhost:50051');
      const authClient: AuthClient = createClient(AuthDefinition, authChannel);

      // hash the password
      let buff = new TextEncoder().encode(input.pwd);
      const hash = Buffer.from(sha256(buff)).toString('hex');

      // create a request
      const req: LoginRequest = {
        user: input.user,
        pwd: hash,
      };

      const response = await authClient.login(req);
      authChannel.close();
      
      return {
        jwt: response.jwt,
        user: input.user
      };
    }),
  register: publicProcedure
    .input(z.object(
      { 
        user: z.string(),
        pwd: z.string(),
      }
    ))
    .mutation(async ({ input }) => {
      const authChannel = createChannel(process.env.GPRC_AUTH_URL ?? 'localhost:50051');
      const authClient: AuthClient = createClient(AuthDefinition, authChannel);

      // hash the password
      let buff = new TextEncoder().encode(input.pwd);
      const hash = Buffer.from(sha256(buff)).toString('hex');

      // create a request
      const req: RegisterRequest = {
        user: input.user,
        pwd: hash,
      };

      await authClient.register(req);
      authChannel.close();
      // mutations dont return anything
    })
});
